multiline 
<drac2>
if ctx.author.id != 167439243147345921:
    return "!test 'Sorry, you are not allowed to use this one.'"
### Item Dictionary (Imported from old crafting rules so that we have descriptions etc
## Possible Keys:
##      name
##      tokenCost
##      gpBase
##      gpCrafting
##      craftingTags
##      craftingNotes (optional)
##      source
##      description
##      rarity
##      tier (optional)
##      type
##      bonus (optional)
##      reqattune (optional)
##      dmg (optional)
##      immunity (optional)
##      charges (optional)
##      undefined (used inconsistently in some items)
##      asi (optional for specific items)
##      attachedSpells (optional)
##      flySpeed (optional)
##      misctags0 (optional)
##      craftable (optional for some items)
##
## New Keys (What to expect from webhook updates:
##      name
##      tokens
##      gp
##      proficiency
##      notes ('ingested' for poisons)
##      rarity (define per zap/webook)

#Expected Arguments from webhook:
#craftUpdate -name -Token -gp -tools -notes -rarity

args = &ARGS&
CHARACTER_LIMIT = 90000

if len(args)<1:
  return f"""!embed -f "You didn't pass any arguments. Time to debug." """
args = argparse(args,parse_ephem=False)

if 'True' in args.get('name') or len(args.get('name'))==0:
  return f"""!embed -title "No name argument" -f "No item name found -> Debug that error" """
name=name[0]

# ffc43b8b-d27d-400b-866b-bb117cfcd8f4 gvar of gvars
#masterGID = 'ffc43b8b-d27d-400b-866b-bb117cfcd8f4'
#craftingGvars = load_json(get_gvar(masterGID)) #list of gvars

craftingGvars = [ '44191f6f-cd83-4634-a159-b1f0d720df58', #Common
                  'ed48a302-be6d-4830-9d42-a4712f3efba8', #Uncommon
                  '175cd1e1-b321-4743-8696-ff01c699929a', #Rare
                  'f25dc813-e988-44ba-b3eb-50d2dd579336', #Very Rare
                  '0944bbe6-037e-4476-b33e-4a6af744bdd1', #Legendary
                  'f1bee8bc-927f-4486-8274-bcf4907fb8ec'] #Poisons

possibleItemKeys = [
    "tokenCost", "gpBase", "gpCrafting", "craftingTags", "craftingNotes", "source",
    "description", "rarity", "tier", "typeTags", "bonus", "reqattune", "dmg",
    "immunity", "charges", "undefined", "asi", "attachedSpells", "flySpeed",
    "misctags0", "craftable"
]

#so this iterates through the gvars
updateText=f"{args.get('name')[0]}"
added=False
returnString=''
newItem={}
for GID in craftingGvars:
  items = load_json(get_gvar(GID)) # Load this sucker up!
  
  for craftable in items:           # For each item in the list
    craftableName = craftable.get('name', '').lower()  # Get item name (default to empty string if None)

    # Check if this is the item we want
    if args.get('name')[0].lower() in craftableName:  # Broad match
      if craftableName in args.get('name')[0].lower():  # Exact match
        # Update logic
        keys = craftable.keys()
        for itemKey in possibleItemKeys:
          keyValue = args.get(itemKey)
          # Check if the argument should update the value
          if len(keyValue) > 0 and keyValue[0] != 'True':
            # Log the update
            oldValue = craftable[itemKey] if itemKey in keys else 'None'
            newValue = keyValue[0]
            if oldValue!=newValue:
              updateText += (f"""\nUpdated `{itemKey}` for `{args.get("name")[0]}` from `{oldValue}` to `{newValue}`\n""")
              craftable[itemKey] = newValue
              added=True
        if added is not True:
          return f"!embed -title 'No Actual Change for Item: {craftableName.title()}'"
              
    if len(str(items)) <= CHARACTER_LIMIT: #After each item see if the change has made
      if added:
        returnString = returnString + f"\n!gvar edit {GID} {dump_json(items)}"
        returnString = f"""\n!embed -f '{updateText.replace("'",'').replace('"','')}' """ + returnString
        return returnString
    else:
      return f"!embed -f 'too big {len(str(items))}'"
      if added:
        newItem=craftable
        newItem[itemKey]=newValue
        oldLen=len(str(items))
        items.remove(craftable)
        newLen=len(str(items))
        return f"!embed -f '{oldLen} -> {newLen}'"
        added=False
        updateText+= (f"\n DEBUG: removed from `{GID}`")
        returnString = returnString + f"\n!gvar edit {GID} {dump_json(items)}"
        break #We found it but can't update it.

#We've looped through and tried to add it to every GVAR. 
if added is not True:
  if len(newItem)==0: # We found it and updated it, but the update was too big
    for itemKey in possibleItemKeys:
      keyValue = args.get(itemKey)
      if keyValue and len(keyValue) > 1 and keyValue[0] != 'True':
        newItem[itemKey]=keyValue[0]
        updateText+=( f"Added new item: {itemKey[name]}:\n" )
        for key in newItem.keys():
          updateText+=( f"{key}:     {newItem[key]}\n" )
  for GID in craftingGvars:
    items = load_json(get_gvar(GID))
    if len(str(items)) + len(str(newItem)) <= CHARACTER_LIMIT:
      newItem['name']=args.get('name')[0]
      for itemKey in possibleItemKeys:
        keyValue = args.get(itemKey)
        # Check if the argument should update the value
        if len(keyValue) > 0 and keyValue[0] != 'True':
          newItem[itemKey]=keyValue[0]
      items.append(newItem)
      updateText+=f"\nDEBUG: Added to {GID}"
      returnString = returnString + f"\n!gvar edit {GID} {dump_json(items)}"
      added=True
      break

if added is not True:
 return f"\n !embed -t 'Error: not enough GVAR space!' -f 'Was unable to find a gvar with space for your item update.'"

##So we are, are most, updating two JSON Gvars.

returnString = f"""\n!embed -f '{updateText.replace("'",'').replace('"','')}' """ + returnString

return returnString

</drac2>