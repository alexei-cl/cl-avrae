embed
<drac2>

hitDieMap = {
    'Artificer':  	8,
    'Barbarian': 	12,
    'Blood Hunter':	10,	
    'Bard':       	8,
    'Cleric':     	8,
    'Druid':      	8,
    'Fighter':   	10,
    'Monk':       	8,
    'Paladin':   	10,
    'Ranger':    	10,
    'Rogue':      	8,
    'Sorcerer':   	6,
    'Warlock':    	8,
    'Wizard':     	6
}

pitEarningMap = {
    '0': 0,
    '1': 100,
    '2': 200,
    '3': 300
}

attMap = {
  'STR':  'strength',
  'DEX':  'dexterity',
  'CON':  'constitution',
  'INT':  'intelligence',
  'WIS':  'wisdom',
  'CHA':  'charisma',
}

# Time calculations
downtime_days = 5                               #how many days take this downtime activity
DAY = 86400                                     #seconds per day
CurTime = int(time())                           #get current time
busyTime = CurTime + ((downtime_days-1) * DAY)  #calculate time when the activity ends


## TBH need to bring this out of a function, or move reliable talent INTO a function
def pitfightroll(useSkill, rollMod=""):
  # .d20(base_adv=None, reroll=None, min_val=None, mod_override=None)
  if (args.get('rel') and ch.skills[useSkill].prof >0):
    useDice = f"{ch.skills[useSkill].d20(None, None, 10, None)}"
  else:
    useDice = f"{ch.skills[useSkill].d20(None, None, None, None)}"

  return vroll(f'{useDice}{f"{rollMod}"}{f"+{argBonus}" if argBonus else ""}')


      
def getWeapons(char):                           #   Takes a character, spits out a SafeDict of all of their avrae automations (!a) that involve an attack roll.
  weaponAttacks = {}                          #   Can't really think of an easy tway to filter weapon attacks vs. spell attacks 
  for attack in char.attacks:                 #   I'm thinking '-w "<Weapon Name>"' as a passable argument? Should be easy to pull the weapon/attack bonus from this function's returned value
    try:                                    #   We could then dynamically determine which roll should be replaced 
      if 'Attack' in str(attack):
        abIndexMin = str(attack).find('Attack')+7
        abIndexMax = str(attack).find('to hit')-1
        weaponAttacks[attack.raw['name']] = {'name':attack.raw['name'],'attackBonus': roll(str(attack)[abIndexMin:abIndexMax].replace(" ","").replace("+",""))}
    except:
      pass
  return weaponAttacks

def findBestMatch(lookupMap, keyArgument):
  bestMatch = None
  for curKey in lookupMap.keys():
    if curKey.lower().startswith(keyArgument.lower()): # leftside match
      if bestMatch is None:
        bestMatch = curKey
      else:
        return curKey
  return bestMatch

def maxHitDieCalc(ch): #moving to function for weapon replacement
  hitDice = []
  for i in ch.levels:                 # Get List of Character's Classes and Class Levels
    hitDice.append(hitDieMap[i[0]])   # Lookup Class Hit Die
  maxHitDie = 0
  for i in hitDice:                   # find max Hit Die
    maxHitDie = max(maxHitDie, i)
  return maxHitDie
  
def replaceWhich(character, ab, wn):           #Given an attack bonus from a weapon, determine which roll if any should be replaced
  attackBonus = int(ab)
  if ab and wn and int(wn) > 0 and int(wn) < 4:
    return int(wn)                # if they've passed valid parameters, replace wn in range [1,3]

  ath = float(character.skills.athletics.value)
  acr = float(character.skills.acrobatics.value)
  con = float(character.stats.get_mod("constitution")+(maxHitDieCalc(character)/2+0.5)) # average roll

  if ath < attackBonus:      # athletics is worse than your attack
    if acr < ath:            # check is acro is even worse..
      if con < acr:          # if, somehow, your con is even worse....
        return 3             # con <  acr <  ath <  attackBonus; replace con roll as it's the 'worst'
      else:
        return 2             # acr <= con <  ath <  attackBonus; replace acr roll as it's the worst
    else:
      if con < ath:          # con <  ath <= acr <  attackBonus; replace con roll as it's the 'worst'
        return 3
      else:                  # ath <= con <= acr <  attackBonus; replace ath roll as it's the 'worst
        return 1
  elif acr < attackBonus:    # attackBonus <= ath
    if con < acr:
      return 3               # con <  acr < attackBonus <= ath; replace con roll
    else:
      return 2               # acr <= con < attackBonus <= ath; replace acr roll
  elif con < attackBonus:    # con < attackBonus <= acr <= ath; replace con roll
    return 3
  else:
    return 0                 # attackBonus <= con <= acr <= ath; why'd you build your character like this?

args = &ARGS&

verbose= f"""{ctx.alias.title()} is a tool for generating a pitfight earning.
  `{ctx.prefix+ctx.alias} [args]`

  **__Valid Arguments__**.
  **`-w "<Weapon>"`** = to replace your worst pitfighting roll with a single weapon attack. Weapon must be equiped/usable through avrae.
  ** `-wn <1-3>`** = to override which roll is replaced with a weapon attack. No argument->your worst roll will be replaced if your weapon is better 
  (Con-> Replaced if Weapon Attack Bonus > Con Mod+AvgHitDieRoll)
  ** * `-v`** To see advanced arguments
  
  __**Advanced Arguments**__
  ** * `adv`** If you have advantage on ALL your checks (Such as from Foresight)
  ** * `adv1` / `adv2` / `adv3` / `advW` ** To specify certain checks to have advantage on Ability Checks 1/2/3 or your Weapon Attack roll
  ** * `rel`** if you have Reliable Talent 
  ** * `lucky`** if you are a Halfling who rerolls nat 1s
  ** * `indom`** if you are a level 18 Barbarian
  """
  
if '-v' in args:
  return f"""embed -title "Looking for a fight?" -desc "{verbose}" """


if (args and any(x for x in ['help','?'] if args[0] in x)) : # Early out for help
  desc = f"""{ctx.alias.title()} is a tool for generating a pitfight earning.
  `{ctx.prefix+ctx.alias} [args]`

  **__Valid Arguments__**
  **`-rel`** = if you have Reliable Talent.
  **`-w "<Weapon>"`** = to replace your worst pitfighting roll with a single weapon attack. Weapon must be equiped/usable through avrae.
  ** `-wn <1-3>`** = to override which roll is replaced with a weapon attack. No argument->your worst roll will be replaced if your weapon is better 
  (Con-> Replaced if Weapon Attack Bonus > Con Mod+AvgHitDieRoll)
  """
  return f"""embed -title "Looking for a fight?" -desc "{desc}" """

args = argparse(args)               # Parse the remaining arguments
argBonus = args.join('b', ' + ')    # If a bonus is provided, add it
weapon = args.join('w', ' ')        # If a Weapon is provided, log it
weaponReplace = args.join('wn', ' ',)

if weaponReplace and not(int(weaponReplace)>0 and int(weaponReplace) < 4 ):
  desc = f"""{ctx.alias.title()} is a tool for generating a pitfight earning.
  `{ctx.prefix+ctx.alias} [args]`
  
  **__Error: Invalid Argument__**
  You've tried to replace roll number {weaponReplace} with a weapon attack, but the argument doesn't fall within the expected range. Please make sure your `-wn` argument is a number between 1 and 3!
  
  ex: `!pitfight -w Warhammer -wn 2`
  
  **__Valid Arguments__**
  **`-rel`** = if you have Reliable Talent.
  **`-w "<Weapon>"`** = to replace your worst pitfighting roll with a single weapon attack. Weapon must be equiped/usable through avrae.
  ** `-wn <1-3>`** = to override which roll is replaced with a weapon attack. No argument->your worst roll will be replaced if your weapon is better 
  (Con-> Replaced if Weapon Attack Bonus > Con Mod+AvgHitDieRoll)
  
  """
  return f"""embed -title "Looking for a fight?" -desc "{desc}" """

ch=character()


charWeapons = getWeapons(ch)        # Populate the character's automations which use an attack roll
charWeaponName = "error"
charWeapBonus = 0
replaceWhichRoll = 0

if weapon: 
  charWeaponName = findBestMatch(charWeapons,weapon)
  
  if not(charWeapons.get(charWeaponName)):
    desc = f"""{ctx.alias.title()} is a tool for generating a pitfight earning.
    `{ctx.prefix+ctx.alias} [args]`
    
    **__Error: Invalid Argument__**
    You've tried to replace a roll with a weapon attack with from a `{weapon}`, but avrae wasn't able to find this weapon on your character. Maybe check for typos, ensure you've equiped the weapon, and try again?
    
    **__Valid Arguments__**
    **`-rel`** = if you have Reliable Talent.
    **`-w "<Weapon>"`** = to replace your worst pitfighting roll with a single weapon attack. Weapon must be equiped/usable through avrae.
    ** `-wn <1-3>`** = to override which roll is replaced with a weapon attack. No argument->your worst roll will be replaced if your weapon is better 
    (Con-> Replaced if Weapon Attack Bonus > Con Mod+AvgHitDieRoll)
    
    """
    return f"""embed -title "Looking for a fight?" -desc "{desc}" """
  
  charWeapBonus = charWeapons.get(charWeaponName).get('attackBonus')
  replaceWhichRoll=replaceWhich(ch,charWeapBonus,weaponReplace) if charWeaponName and charWeapBonus else 0

# get highest Hit Die
maxHitDie = maxHitDieCalc(ch)

##############
## Roll DCs ##
##############

DC1 = vroll("2d10+5")
DC2 = vroll("2d10+5")
DC3 = vroll("2d10+5")
weapDC=None
match replaceWhichRoll:
  case 1:
    weapDC = DC1
  case 2:
    weapDC = DC2
  case 3:
    weapDC = DC3

useWeapRoll = "1d20"

#################
## Skill Rolls ##
#################

d20Dict = {
    'Roll 1':   {'adv':None,   'reroll':None, 'min_val':None,   'mod_override':None},
    'Roll 3':   {'adv':None,   'reroll':None, 'min_val':None,   'mod_override':None},
    'Roll 2':   {'adv':None,   'reroll':None, 'min_val':None,   'mod_override':None},
    'Roll W':   {'adv':None,   'reroll':None, 'min_val':None,   'mod_override':None},
}
miscNotes=''

## Halfling Lucky ##
if ('halfling' in character().race.lower()) or 'lucky' in args:
  for key in d20Dict:
    d20Dict[key].update({'reroll':1})
  miscNotes+=f'\n{character().name} rerolls Nat 1s due to being a {character().race}'
  useWeapRoll +="ro1" ##Halfling Luck applies to attack rolls

## Advantage ##
if 'adv' in &ARGS&:
  d20Dict['Roll 1'].update({'adv':True})
  d20Dict['Roll 2'].update({'adv':True})
  d20Dict['Roll 3'].update({'adv':True})
  d20Dict['Roll W'].update({'adv':True})
  miscNotes+=f'\n{character().name} has advantage on all of their rolls (Player passed the **`adv`** argument)'
else:
  if 'adv1' in &ARGS&:
    d20Dict['Roll 1'].update({'adv':True})
    miscNotes+=f'\n{character().name} has advantage on their Athletics (Strength) roll (Player passed the **`adv1`** argument)'
  if 'adv2' in &ARGS&:
    d20Dict['Roll 2'].update({'adv':True})
    miscNotes+=f'\n{character().name} has advantage on their Acrobatics (Dexterity) roll (Player passed the **`adv2`** argument)'
  if 'adv3' in &ARGS&:
    d20Dict['Roll 3'].update({'adv':True})
    miscNotes+=f'\n{character().name} has advantage on their Constitution Roll (Player passed the **`adv3`** argument)'
  if 'advW' in &ARGS&:
    d20Dict['Roll W'].update({'adv':True})
    miscNotes+=f'\n{character().name} has advantage on their Weapon Attack Roll (Player passed the **`advW`** argument)'

if character().skills['athletics'].adv:
  d20Dict['Roll 1'].update({'adv':True})
  miscNotes+=f'\n{character().name} has advantage on Athletics (Strength) rolls for some reason (Set in Avrae)'

if character().skills['acrobatics'].adv:
  d20Dict['Roll 2'].update({'adv':True})
  miscNotes+=f'\n{character().name} has advantage on Acrobatics (Dexterity) rolls for some reason (Set in Avrae)'

if character().skills['constitution'].adv:
  d20Dict['Roll 3'].update({'adv':True})
  miscNotes+=f'\n{character().name} has advantage on Constitution rolls for some reason (Set in Avrae)'

## Reliable Talents ##

# Rogue #
if 'rel' in args or character().levels.get('Rogue')>=11: #reliable talent TODO: add `rel`
  if ch.skills['athletics'].prof > 0:
    d20Dict['Roll 1'].update({'min_val':10})
    miscNotes+=f'\n{character().name} cannot roll below a 10 on Athletics rolls due to Rogue\'s Reliable Talent'
  if ch.skills['acrobatics'].prof > 0:
    miscNotes+=f'\n{character().name} cannot roll below a 10 on Acrobatics rolls due to Rogue\'s Reliable Talent'
    d20Dict['Roll 2'].update({'min_val':10})
  if ch.skills['constitution'].prof > 0:
    miscNotes+=f'\n{character().name} cannot roll below a 10 on Constitution rolls due to Rogue\'s Reliable Talent'
    d20Dict['Roll 3'].update({'min_val':10})


roll1= vroll( f"{ch.skills['athletics'].d20(d20Dict['Roll 1']['adv'], d20Dict['Roll 1']['reroll'], d20Dict['Roll 1']['min_val'], d20Dict['Roll 1']['mod_override'])}")
roll2= vroll(f"{ch.skills['acrobatics'].d20(d20Dict['Roll 2']['adv'], d20Dict['Roll 2']['reroll'], d20Dict['Roll 2']['min_val'], d20Dict['Roll 2']['mod_override'])}")
roll3= vroll(f"{ch.skills['constitution'].d20(d20Dict['Roll 3']['adv'], d20Dict['Roll 3']['reroll'], d20Dict['Roll 3']['min_val'], d20Dict['Roll 3']['mod_override'])}+1d{maxHitDie}")

# Barbarian #
indom=False
if character().levels.get('Barbarian')>=18 or 'indom' in args: #Imdomitable Might
  indom=True
  miscNotes+=f'\n{character().name} cannot roll below a {character().stats.strength} on Athletics rolls due to Barbarian\'s Indomitable Might'
  
if miscNotes:
  miscNotes =' -f "**__Misc Notes:__**' + miscNotes + '"'

weapRoll = vroll((("2d20kh1+") if d20Dict['Roll W']['adv'] else ("1d20+")) +charWeapBonus)

match replaceWhichRoll:
  case 1:
    roll1= weapRoll
  case 2:
    roll2 = weapRoll
  case 3:
    roll3 = weapRoll

pitfightSuccess = 0
roll1Total = character().stats.strength if indom else roll1.total

if roll1Total >= DC1.total: pitfightSuccess = pitfightSuccess +1
if roll2.total >= DC2.total: pitfightSuccess = pitfightSuccess +1
if roll3.total >= DC3.total: pitfightSuccess = pitfightSuccess +1

pitfightEarning = pitEarningMap[str(pitfightSuccess)]

tier = 1 if level < 5 else ( 2 if level < 9 else (3 if level < 13 else (4 if level < 17 else 5)))

outTitle = (f'Pit Fighting <t:{CurTime}:D> - <t:{busyTime}:D>')
outDescr = (f'\n**Character:** {ch.name}') +  \
           (f'\n**Successes:** {str(pitfightSuccess)} / 3') +  \
           (f'\n**Winnings:** {str(pitfightEarning)} * Tier {tier} --> **{pitfightEarning * tier }gp**!') +  \
           (f'\n [Downtime earnings are multiplied by tier!](https://discord.com/channels/938988968404451339/938988968404451342/1290479256584851526)')


weaponField = (f'__Check {replaceWhichRoll} - Weapon Attack - {charWeaponName}__|**Target** {weapDC} \n **Attack Roll** {weapRoll}')

outField1 = weaponField if replaceWhichRoll==1 else (f"__Check 1 - STR(Athletics)__|**DC** {DC1} \n**Check** {'~~' if indom and roll1.total<character().stats.strength else ''}{roll1}{f'~~ **{character().stats.strength}**' if indom and roll1.total<character().stats.strength else ''}\n")
outField1 += (f'\n{":white_check_mark: *Success*" if roll1.total >= DC1.total else ":x: *no Success*"}\n')

outField2 = weaponField if replaceWhichRoll==2 else (f"__Check 2 - DEX(Acrobatics)__|**DC** {DC2} \n**Check** {roll2}\n")
outField2 += (f'\n{":white_check_mark: *Success*" if roll2.total >= DC2.total else ":x: *no Success*"}\n')

outField3 = weaponField if replaceWhichRoll==3 else (f"__Check 3 - CON + Hit Die__|**DC** {DC3} \n**Check** {roll3}\n")
outField3 += (f'\n{":white_check_mark: *Success*" if roll3.total >= DC3.total else ":x: *no Success*"}\n')

nextFreetime =(f'next downtime use|<t:{busyTime + DAY}:F> \n')

return f'-title "{outTitle}" -f "{outField1}" -f "{outField2}" -f "{outField3}" -f "__Result__|{outDescr}" {miscNotes} -f " \n{nextFreetime}" -f "-# Problems with this alias? Ping the developer \@alexei"'
</drac2>

-thumb <image>
-color <color>
-footer "{{ctx.prefix}}{{ctx.alias}} {{&ARGS& if len(&ARGS&)>0 else ""}}"